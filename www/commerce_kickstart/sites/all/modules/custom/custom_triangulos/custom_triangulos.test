<?php

/**
* CustomTriangulosUnitTestCase
*
* @uses     DrupalUnitTestCase
*
* @category Category
* @package  Package
* @author    <>
* @license  
* @link     
*/
class CustomTriangulosUnitTestCase extends DrupalUnitTestCase {
	static function getInfo() {
		return array(
			'name' => 'CustomTriangulos',
			'description' => 'Testes unitarios de triangulos',
			'group' => 'Triangulos',
		);
	}

	public function testTrianguloEquilatero(){
		$lado1 = 10;
		$lado2 = 10;
		$lado3 = 10;
		$this->assertEqual("equilátero", _custom_triangulos_define($lado1, $lado2, $lado3), 'O triângulo não é equilátero');
	}

	public function testTrianguloEscaleno(){
		$lado1 = 9;
		$lado2 = 10;
		$lado3 = 8;
		$this->assertEqual("escaleno", _custom_triangulos_define($lado1, $lado2, $lado3), 'O triângulo não é escaleno.');
	}

	public function testTrianguloIsoceles(){
		$lado1 = 8;
		$lado2 = 10;
		$lado3 = 8;
		$this->assertEqual("isóceles", _custom_triangulos_define($lado1, $lado2, $lado3), 'O triângulo não é isóceles.');
	}

	public function testTrianguloIsocelesNN0(){
		$lado1 = 8;
		$lado2 = 8;
		$lado3 = 10;
		$this->assertEqual("isóceles", _custom_triangulos_define($lado1, $lado2, $lado3), 'O triângulo não é isóceles.');
	}

	public function testNaoValidar(){
		$lado1 = 10;
		$lado2 = 'B';
		$lado3 = 'C';
		$this->assertEqual("", _custom_triangulos_define($lado1, $lado2, $lado3), 'O triângulo não é valido mas não precisa ser validado');
	}
}

/**
* CustomTriangulosWebTestCase
*
* @uses     DrupalWebTestCase
*
* @category Category
* @package  Package
* @author    <>
* @license  
* @link     
*/
class CustomTriangulosWebTestCase extends DrupalWebTestCase{
	static function getInfo() {
		return array(
			'name' => 'CustomTriangulosWeb',
			'description' => 'Testes de aceitação de triangulos',
			'group' => 'Triangulos',
		);
	}

	function setUp() {
    	parent::setUp('custom_triangulos');
    	$web_user = $this->drupalCreateUser(array('testar triangulos'));
    	$this->drupalLogin($web_user);
	}

	function testPermission(){
	    $this->drupalGet('triangulos');
	    $this->assertResponse(200);
	}

	function testTrianguloEquilatero(){
		$edit = array();
	    $edit['lado1'] = 2;
	    $edit['lado2'] = 2;
	    $edit['lado3'] = 2;
	    $this->drupalPost('triangulos', $edit, t('Calcular'));
	    $this->assertResponse(200);
	    $this->assertRaw('Triângulo equilátero', 'Não foi encontrado o resultado');
	}

	function testTrianguloEscaleno(){
		$edit = array();
	    $edit['lado1'] = 1;
	    $edit['lado2'] = 2;
	    $edit['lado3'] = 3;
	    $this->drupalPost('triangulos', $edit, t('Calcular'));
	    $this->assertResponse(200);
	    $this->assertRaw('Triângulo escaleno', 'Não foi encontrado o resultado');
	}

	function testTrianguloIsoceles(){
		$edit = array();
	    $edit['lado1'] = 1;
	    $edit['lado2'] = 2;
	    $edit['lado3'] = 2;
	    $this->drupalPost('triangulos', $edit, t('Calcular'));
	    $this->assertResponse(200);
	    $this->assertRaw('Triângulo isóceles', 'Não foi encontrado o resultado');
	}
}